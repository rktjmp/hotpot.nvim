*hotpot-api*

============================================================== *hotpot-api-toc*

The Hotpot API.....................................................|hotpot.api|
Diagnostics API........................................|hotpot.api.diagnostics|
  attach........................................|hotpot.api.diagnostics.attach|
  detach........................................|hotpot.api.diagnostics.detach|
  disable......................................|hotpot.api.diagnostics.disable|
  enable........................................|hotpot.api.diagnostics.enable|
  error-for-buf..........................|hotpot.api.diagnostics.error-for-buf|
  set-options..............................|hotpot.api.diagnostics.set-options|
Reflect API................................................|hotpot.api.reflect|
  attach-input................................|hotpot.api.reflect.attach-input|
  attach-output..............................|hotpot.api.reflect.attach-output|
  detach-input................................|hotpot.api.reflect.detach-input|
  set-mode........................................|hotpot.api.reflect.set-mode|
Make API......................................................|hotpot.api.make|
  build.................................................|hotpot.api.make.build|
  check.................................................|hotpot.api.make.check|
Eval API......................................................|hotpot.api.eval|
  eval-buffer.....................................|hotpot.api.eval.eval-buffer|
  eval-file.........................................|hotpot.api.eval.eval-file|
  eval-module.....................................|hotpot.api.eval.eval-module|
  eval-range.......................................|hotpot.api.eval.eval-range|
  eval-selection...............................|hotpot.api.eval.eval-selection|
  eval-string.....................................|hotpot.api.eval.eval-string|
Compile API................................................|hotpot.api.compile|
  compile-buffer............................|hotpot.api.compile.compile-buffer|
  compile-file................................|hotpot.api.compile.compile-file|
  compile-module............................|hotpot.api.compile.compile-module|
  compile-range..............................|hotpot.api.compile.compile-range|
  compile-selection......................|hotpot.api.compile.compile-selection|
  compile-string............................|hotpot.api.compile.compile-string|
Cache API....................................................|hotpot.api.cache|
  cache-path-for-fnl-file............|hotpot.api.cache.cache-path-for-fnl-file|
  cache-path-for-module................|hotpot.api.cache.cache-path-for-module|
  cache-prefix..................................|hotpot.api.cache.cache-prefix|
  clear-cache....................................|hotpot.api.cache.clear-cache|
  clear-cache-for-fnl-file..........|hotpot.api.cache.clear-cache-for-fnl-file|
  clear-cache-for-module..............|hotpot.api.cache.clear-cache-for-module|

================================================================== *hotpot.api*

The Hotpot API~

The Hotpot API provides tools for compiling and evaluating fennel code inside
Neovim, as well as performing ahead-of-time compilation to disk - compared to
Hotpots normal on-demand behaviour.

The API is proxied and may be accessed in a few ways:
>
  (let [hotpot (require :hotpot)]
    (hotpot.api.compile-string ...))

  (let [api (require :hotpot.api)]
    (api.compile-string ...))

  (let [{: compile-string} (require :hotpot.api.compile)]
    (compile-string ...))

All position arguments are "linewise", starting at 1, 1 for line 1, column 1.
Ranges are end-inclusive.

====================================================== *hotpot.api.diagnostics*

Diagnostics API~

Framework for rendering compiler diagnostics inside Neovim.

The diagnostics framework is enabled by default for the `fennel` FileType
autocommand, see `hotpot.setup` for instructions on disabling it. You can
manually attach to buffers by calling `attach`.

The diagnostic is limited to one sentence (as provided by Fennel), but the
entire error, including hints can be accessed via the `user_data` field of the
diagnostic, or via `error-for-buf`.

Macro forms require a special environment to correctly parse. Files ending in
`macro.fnl` or `macros.fnl` are automatically evaluated in this context.

----------------------------------------------- *hotpot.api.diagnostics.attach*

attach~

`(attach user-buf)`

Attach handler to buffer which will render compilation errors as diagnostics.

Buf can be 0 for current buffer, or any valid buffer number.

Returns the buffer-id which can be used to `detach` or get `error-for-buf`,
when given 0, this id will be the 'real' buffer id, otherwise it will match
the original `buf` argument.


----------------------------------------------- *hotpot.api.diagnostics.detach*

detach~

`(detach user-buf ?opts)`

Remove hotpot-diagnostic instance from buffer.


---------------------------------------------- *hotpot.api.diagnostics.disable*

disable~

`(disable)`

Disables filetype autocommand and detaches any attached buffers


----------------------------------------------- *hotpot.api.diagnostics.enable*

enable~

`(enable)`

Enables autocommand to attach diagnostics to Fennel filetype buffers


---------------------------------------- *hotpot.api.diagnostics.error-for-buf*

error-for-buf~

`(error-for-buf user-buf)`

Get current error for buffer (includes all Fennel hints) or nil if no error.
The raw fennel error is also attached to the `user_data` field of the
diagnostic structure returned by Neovim.


------------------------------------------ *hotpot.api.diagnostics.set-options*

set-options~

`(set-options user-buf opts ?how)`

Set compiler options for a buffer, where the defaults are incompatible.

This is useful for allowing error checking in macro modules.

user-buf must match an already attached buffer (0 is valid if attached).

opts is a table of compiler options.

?how can adjust how the buffer is checked, by default it is :compile but you
may set this to :eval for macro-modules.

BE CAREFUL when setting to :eval, THE CODE WILL BE RUN when checking for
errors.

This API is EXPERIMENTAL and behaviour may change in the future if future
options are suported, which may dictate how missing options are handled.

========================================================== *hotpot.api.reflect*

Reflect API~

A REPL-like toolkit.

!! The Reflect API is experimental and its shape may change, particularly around
accepting ranges instead of requiring a visual selection and some API terms
such as what a `session` is. !!

!! Do NOT run dangerous code inside an evaluation block! You could cause
massive damage to your system! !!

!! Some plugins (Parinfer) can be quite destructive to the buffer and can cause
marks to be lost or damaged. In this event you can just reselect your range. !!

Reflect API acts similarly to a REPL environment but instead of entering
statements in a conversational manner, you mark sections of your code and the
API will "reflect" the result to you and update itself as you change your
code.

The basic usage of the API is:

1. Get an output buffer pass it to `attach-output`. A `session-id` is returned.

2. Visually select a region of code and call `attach-input session-id <buf>`
where buf is probably `0` for current buffer.

Note that windowing is not mentioned. The Reflect API leaves general window
management to the user as they can best decide how they wish to structure their
editor - with floating windows, splits above, below, etc. The Reflect API also
does not provide any default bindings.

The following is an example binding setup that will open a new window and
connect the output and inputs with one binding. It tracks the session and only
allows one per-editor session. This code is written verbosely for education and
could be condensed.

>
  ;; Open session and attach input in one step.
  ;; Note the complexity here is mostly due to nvim not having an api to create a
  ;; split window, so we must shuffle some code to create a buf, pair input and output
  ;; then put that buf inside a window.
  (local reflect-session {:id nil :mode :compile})
  (fn new-or-attach-reflect []
    (let [reflect (require :hotpot.api.reflect)
          with-session-id (if reflect-session.id
                            (fn [f]
                              ;; session id already exists, so we can just pass
                              ;; it to whatever needs it
                              (f reflect-session.id))
                            (fn [f]
                              ;; session id does not exist, so we need to create
                              ;; an output buffer first then we can pass the
                              ;; session id on, and finally hook up the output
                              ;; buffer to a window
                              (let [buf (api.nvim_create_buf true true)
                                    id (reflect.attach-output buf)]
                                (set reflect-session.id id)
                                (f id)
                                ;; create window, which will forcibly assume focus, swap the buffer
                                ;; to our output buffer and setup an autocommand to drop the session id
                                ;; when the session window is closed.
                                (vim.schedule #(do
                                                 (api.nvim_command "botright vnew")
                                                 (api.nvim_win_set_buf (api.nvim_get_current_win) buf)
                                                 (api.nvim_create_autocmd :BufWipeout
                                                                          {:buffer buf
                                                                           :once true
                                                                           :callback #(set reflect-session.id nil)}))))))]
      ;; we want to set the session mode to our current mode, and attach the
      ;; input buffer once we have a session id
      (with-session-id (fn [session-id]
                         ;; we manually set the mode each time so it is persisted if we close the session.
                         ;; By default `reflect` will use compile mode.
                         (reflect.set-mode session-id reflect-session.mode)
                         (reflect.attach-input session-id 0)))))
  (vim.keymap.set :v :hr new-or-attach-reflect)

  (fn swap-reflect-mode []
    (let [reflect (require :hotpot.api.reflect)]
      ;; only makes sense to do this when we have a session active
      (when reflect-session.id
        ;; swap held mode
        (if (= reflect-session.mode :compile)
          (set reflect-session.mode :eval)
          (set reflect-session.mode :compile))
        ;; tell session to use new mode
        (reflect.set-mode reflect-session.id reflect-session.mode))))
  (vim.keymap.set :n :hx swap-reflect-mode)



--------------------------------------------- *hotpot.api.reflect.attach-input*

attach-input~

`(attach-input session-id given-buf-id)`

Attach given buffer to session. This will detach any existing attachment first.

Returns session-id


-------------------------------------------- *hotpot.api.reflect.attach-output*

attach-output~

`(attach-output given-buf-id)`

Configures a new Hotpot reflect session. Accepts a buffer id. Assumes
the buffer is already in a window that was configured by the caller
(float, split, etc). The contents of this buffer should be treated as
ephemeral, do not pass an important buffer in!

Returns `session-id {: attach : detach}` where `attach` and `detach`
act as the module level `attach` and `detach` with the session-id
argument already filled.


--------------------------------------------- *hotpot.api.reflect.detach-input*

detach-input~

`(detach-input session-id)`

Detach buffer from session, which removes marks and autocmds.

Returns session-id


------------------------------------------------- *hotpot.api.reflect.set-mode*

set-mode~

`(set-mode session-id mode)`

Set session to eval or compile mode

============================================================= *hotpot.api.make*

Make API~

Tools to compile Fennel code ahead of time.

------------------------------------------------------- *hotpot.api.make.build*

build~

`(build ...)`

Build fennel code found inside a directory (or single file), according to
user defined rules. Files are only built if the output file is missing or if
the source file is newer.

`build` accepts a `source-path`, an optional `options` table and then a set of
`pattern function` argument pairs. If `source-path` is a directory, each
`*.fnl` file in `source-path` is checked against each `pattern` given, and if
any match the `function` is called with the pattern captures as arguments.
The function should return a path to save the compiled file to, or `nil`
(`.fnl` extensions are automatically converted to `.lua` for QOL). If
`source-path` is a file, it acts similar as for a directory but only for the
file-path given.

You may want to use this to build plugins written in Fennel or to compile
small sections of your configuration that are never loaded via lua's
`require` function. An example of these are `ftplugins/*.lua` or
`colors/*.lua` files which are directly interpreted via Neovim and never
loaded "as modules".

Note: Regular Hotpot operation will track staleness due to dependency
changes, a file will be "stale" if a macro it uses was changed, even if the
file itself was not updated. Because `make.build` operates outside of Hotpots
regular infrastructure, it does not currently track stale-ness to this level
and only compares the source file vs the target file. See the `force?` option.

Returns `[[src, dest, result<ok>] ...] [[src, dest, result<err>] ...]`

Usage example:

>
  ;; build all fnl files inside config dir
  (build "~/.config/nvim"
         ;; ~/.config/nvim/fnl/*.fnl -> ~/.config/nvim/lua/*.lua
         "(.+)/fnl/(.+)" 
         (fn [root path {: join-path}] ;; root is the first match, path is the second
           ;; ignore our own macro file (init-macros.fnl is ignored by default)
           (if (not (string.match path "my-macros%.fnl$"))
             ;; join-path automatically uses the os-appropriate path separator
             (join-path root :lua path)))
         ;; config/ftplugins/*.fnl -> config/ftplugins/*.lua
         "(~/.config/nvim/ftplugins/.+)"
         (fn [whole-path] (values whole-path)))
<

Arguments are as given,

`source-path`

Directory to recursively search inside for `*.fnl` files or a direct path to
a `.fnl` file. Direct paths are accepted as given but when recursing a
directory any file named `init-macros.fnl` is ignored, as macros do not
compile to lua. Any leading `~` is expanded via `os.getenv :HOME`, if the
expansion fails an error is raised. Paths may be relative to the current
working directory with a leading `.`.

`options-table` (may be omitted)

>
  {:atomic? true
   :verbosity 1
   :compiler {:modules {...}
              :macros {...}}}
<

The options table may contain the following keys:

`atomic?`: When true, if there is any compilation error, no files are written
          to disk. Defaults to true.

`verbosity`: Adjusts information output. Errors are always output.
             - `0`: No output
             - `1`: Outputs compilation messages and nothing-to-do message
             Defaults to 1.

`force?`: Force compilation, even if output is not stale.

`compiler`: The compiler table has the same form and function as would be
            given to `hotpot.setup`. If the table is not given, the
            `compiler` options given to `hotpot.setup` are used.

`pattern`

A string that each found file path will be tested against.

Ex: `"(.+)/fnl/health/(.+)"`

`function`

A function that's called if a file path matched the pattern. The function
should return the output path, ending in .fnl or .lua.

The extension must be `.lua` or `.fnl`. A `.lua` file is always output, but
the extension must be present in the return value.

`~` expansion is *not* applied to this path.

If the function returns nil, the file will be checked against the remaining
patterns, if all patterns return nil, the file is ignored and not compiled.

The function is called with each capture group in its associated pattern and
a final table containing helper functions.

Ex: (fn [source-path path-inside-health-dir {: join-path}
         (join-path some-dir :lua path-inside-health-dir))

Helpers: `join-path` joins all arguments with platform-specific separator.

You can provide any number of patterns function pairs. Patterns are checked
in the order given and match will stop future checks.

Notes:

Each time you run your build function, the directory must be recursively
iterated for matching files. Configurations with thousands of files and
hundreds of match-function pairs may suffer negative performance impacts.

Even with no changes to the source files, the directory must be iterated and
*checked* for changes each time the build function is run. This check is
reasonably fast as we only have to check a few bytes of filesystem metadata
but it *is* a non-zero cost.

When in doubt, benchmark your build time and potentially limit its source
directory scope if searching is unreasonably long.


------------------------------------------------------- *hotpot.api.make.check*

check~

`(check ...)`

Functionally identical to `build' but wont output any files. `check' is
always verbose. Returns `[[src, dest, result<ok>] ...] [[src, dest, result<err>] ...]`

============================================================= *hotpot.api.eval*

Eval API~

Tools to evaluate Fennel code in-editor. All functions return
   `true result ...` or `false err`.

   Note: If your Fennel code does not output anything, running these functions by
   themselves will not show any output! You may wish to wrap them in a
   `(print (eval-* ...))` expression for a simple REPL.

------------------------------------------------- *hotpot.api.eval.eval-buffer*

eval-buffer~

`(eval-buffer buf ?options)`

Evaluate the given `buf`, returns `true result ...` or `false error`.
Accepts an optional `options` table as described by Fennels API
documentation.


--------------------------------------------------- *hotpot.api.eval.eval-file*

eval-file~

`(eval-file fnl-file ?options)`

Read contents of `fnl-path` and evaluate the contents, returns `true
result ...` or `false error`. Accepts an optional `options` table as
described by Fennels API documentation.


------------------------------------------------- *hotpot.api.eval.eval-module*

eval-module~

`(eval-module modname ?options)`

Use hotpots module searcher to find the file for `modname`, load and
evaluate its contents, returns `true result ...` or `false error`..
Accepts an optional `options` table as described by Fennels API
documentation.


-------------------------------------------------- *hotpot.api.eval.eval-range*

eval-range~

`(eval-range buf start-pos stop-pos ?options)`

Evaluate `buf` from `start-pos` to `end-pos`, returns `true result
...` or `false error`. Positions can be `line` or `line col`. Accepts
an optional `options` table as described by Fennels API
documentation.


---------------------------------------------- *hotpot.api.eval.eval-selection*

eval-selection~

`(eval-selection ?options)`

Evaluate the current selection, returns `true result ...` or `false
error`. Accepts an optional `options` table as described by Fennels
API documentation.


------------------------------------------------- *hotpot.api.eval.eval-string*

eval-string~

`(eval-string code ?options)`

Evaluate given fennel `code`, returns `true result ...` or `false
error`. Accepts an optional `options` table as described by Fennels
API documentation.

========================================================== *hotpot.api.compile*

Compile API~


   Tools to compile Fennel code in-editor. All functions return `true code` or
   `false err`. To compile fennel code to disk, see |hotpot.api.make|.

   Every `compile-*` function returns `true, luacode` or `false, errors` .

   Note: The compiled code is _not_ saved anywhere, nor is it placed in Hotp
   cache. To compile into cache, use `require("modname")`.

------------------------------------------- *hotpot.api.compile.compile-buffer*

compile-buffer~

`(compile-buffer buf ?options)`

Read the contents of `buf` and compile into lua, returns `true lua` or
`false error`. Accepts an optional `options` table as described by Fennels
API documentation.


--------------------------------------------- *hotpot.api.compile.compile-file*

compile-file~

`(compile-file fnl-path ?options)`

Read contents of `fnl-path` and compile into lua, returns `true lua` or
`false error`. Will raise if file does not exist. Accepts an optional
`options` table as described by Fennels API documentation.


------------------------------------------- *hotpot.api.compile.compile-module*

compile-module~

`(compile-module modname ?options)`

Use hotpots module searcher to find `modname` and compile it into lua code,
returns `true fnl-code` or `false error`. Accepts an optional `options` table
as described by Fennels API documentation.


-------------------------------------------- *hotpot.api.compile.compile-range*

compile-range~

`(compile-range buf start-pos stop-pos ?options)`

Read `buf` from `start-pos` to `end-pos` and compile into lua, returns `true
lua` or `false error`. Positions can be `line-nr` or `[line-nr col]`. Accepts
an optional `options` table as described by Fennels API documentation.


---------------------------------------- *hotpot.api.compile.compile-selection*

compile-selection~

`(compile-selection ?options)`

Read the current selection and compile into lua, returns `true lua` or
`false error`. Accepts an optional `options` table as described by Fennels
API documentation.


------------------------------------------- *hotpot.api.compile.compile-string*

compile-string~

`(compile-string str ?options)`

Compile given `str` into lua, returns `true lua` or `false error`. Accepts
an optional `options` table as described by Fennels API documentation.

============================================================ *hotpot.api.cache*

Cache API~

Tools to interact with Hotpots cache and index, such as
   getting paths to cached lua files or clearing index entries.

   You can manually interact with the cache at `~/.cache/nvim/hotpot`.

   The cache will automatically refresh when required, but note: removing the
   cache file is not enough to force recompilation in a running session. The
   loaded module must be removed from Lua's `package.loaded` table, then
   re-required.
   >
   (tset package.loaded :my_module nil) ;; Does NOT unload my_module.child

   (Hint: You can iterate `package.loaded` and match the key for `"^my_module"`.)

   Note: Some of these functions are destructive, Hotpot bears no responsibility for
   any unfortunate events.

------------------------------------ *hotpot.api.cache.cache-path-for-fnl-file*

cache-path-for-fnl-file~

`(cache-path-for-fnl-file fnl-path)`

Get on-disk path to compiled lua that mirrors given fennel source file. File
path should be absoulute, see |expand| or `fs_realpath` from |vim.loop|.


-------------------------------------- *hotpot.api.cache.cache-path-for-module*

cache-path-for-module~

`(cache-path-for-module modname)`

Get on-disk path to compiled lua for given module name


----------------------------------------------- *hotpot.api.cache.cache-prefix*

cache-prefix~

`(cache-prefix)`

undocumented


------------------------------------------------ *hotpot.api.cache.clear-cache*

clear-cache~

`(clear-cache)`

Clear all lua cache files and bytecode index


----------------------------------- *hotpot.api.cache.clear-cache-for-fnl-file*

clear-cache-for-fnl-file~

`(clear-cache-for-fnl-file fnl-path)`

Clear compiled lua cache file that mirrors given fennel source file, does
_not_ clear index entry, instead use clear-cache-for-module. File path should
be absoulute, see |expand| or `fs_realpath` from |vim.loop|.


------------------------------------- *hotpot.api.cache.clear-cache-for-module*

clear-cache-for-module~

`(clear-cache-for-module modname)`

Clear compiled lua cache file for given module name, also clears index entry

